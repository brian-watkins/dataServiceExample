package com.liatrio.exercise.dataService.repository;

import com.liatrio.exercise.dataService.model.Item;
import org.springframework.stereotype.Repository;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;

@Repository
public class InMemoryCoreProcessItemsRepository implements CoreProcessItemsRepository {
    private final List<Item> items = new ArrayList<>();
    private final AtomicLong idSequence = new AtomicLong(3); // Start after our 3 initial items

    public InMemoryCoreProcessItemsRepository() {
        // Initialize with some data for testing
        items.add(new Item(1L, "Item 1"));
        items.add(new Item(2L, "Item 2"));
        items.add(new Item(3L, "Item 3"));
    }

    @Override
    public List<Item> findAll() {
        return new ArrayList<>(items);
    }
    
    @Override
    public Optional<Item> findById(Long id) {
        return items.stream()
                .filter(item -> item.id().equals(id))
                .findFirst();
    }
    
    @Override
    public Item save(Item item) {
        // Handle creation with autogenerated ID
        if (item.id() == null) {
            Item newItem = new Item(idSequence.incrementAndGet(), item.name());
            items.add(newItem);
            return newItem;
        }
        
        // Handle update of existing item (not required for this exercise but included for completeness)
        int index = -1;
        for (int i = 0; i < items.size(); i++) {
            if (items.get(i).id().equals(item.id())) {
                index = i;
                break;
            }
        }
        
        if (index != -1) {
            items.set(index, item);
            return item;
        } else {
            // If item with ID not found, treat as new
            items.add(item);
            return item;
        }
    }
    
    @Override
    public void deleteById(Long id) {
        // Check if item exists first
        boolean exists = items.stream().anyMatch(item -> item.id().equals(id));
        
        if (!exists) {
            throw new IllegalArgumentException("Item with ID " + id + " not found");
        }
        
        // Remove the item
        items.removeIf(item -> item.id().equals(id));
    }
}
